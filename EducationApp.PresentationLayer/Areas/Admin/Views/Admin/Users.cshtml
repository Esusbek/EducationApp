@using EducationApp.BusinessLogicLayer.Models.ViewModels
@using EducationApp.BusinessLogicLayer.Models.Users
@using EducationApp.Shared.Constants
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model UsersViewModel
@{
    ViewData["Title"] = "Users list";
}
<div class="tables-header">
    <div><h4>Users Page</h4></div>
</div>
<table class="table">
    <thead>
        <tr>
            <th><a href="javascript:void(0);" class="table-head">Username</a></th>
            <th><a href="javascript:void(0);" class="table-head">Email</a></th>
            <th>
                <a href="javascript:void(0);" class="table-head sort-by descending-sort">Name</a>
                @Html.TextBoxFor(model => model.SearchString)

            </th>
            <th>
                <a href="javascript:void(0);" class="table-head">Status</a>
                <div id="checkboxes">
                    <input type="checkbox" asp-for="IsBlocked" id="IsBlocked"/>
                    <label asp-for="IsBlocked">Blocked</label>
                    <input type="checkbox" asp-for="IsUnblocked" id="IsUnblocked" />
                    <label asp-for="IsUnblocked">Unblocked</label>
                </div>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (UserModel user in Model.Users)
        {
            <tr>
                <td>@user.UserName</td>
                <td>@user.Email</td>
                <td>@user.FirstName @user.LastName</td>
                <td>
                    @if (user.UserName != User.Identity.Name)
                    {
                        @if (user.IsRemoved)
                        {
                            <label class="switch">
                                <input class="ban-switch" type="checkbox" id=@user.Id>
                                <span class="slider round"></span>
                            </label>
                        }
                        @if (!user.IsRemoved)
                        {
                            <label class="switch">
                                <input class="ban-switch" type="checkbox" checked id=@user.Id>
                                <span class="slider round"></span>
                            </label>
                        }
                    }
                    @if (user.UserName == User.Identity.Name)
                    {
                        <label class="switch">
                            <input class="ban-switch-admin" type="checkbox" checked id=@user.Id>
                            <span class="slider round"></span>
                        </label>
                    }
                </td>
                <td>
                    @if (user.UserName != User.Identity.Name)
                    {
                        <button class="edit-open" onclick="userModal('@user.Id')"></button>
                    }
                    @if (user.UserName == User.Identity.Name)
                    {
                        <button class="edit-open" onclick="adminEdit()"></button>
                    }

                </td>
            </tr>
        }
    </tbody>
</table>


<div class="pages">
    <div class="filler"></div>
    @Html.ActionLink("previous page", "Users", "Admin", new
{
    page = Model.Page - Constants.DEFAULTPREVIOUSPAGEOFFSET,
    searchString = HtmlEncoder.Encode(Model.SearchString),
    isBlocked = Model.IsBlocked.ToString().ToLower(),
    isUnblocked = Model.IsUnblocked.ToString().ToLower()

}, new
{
    id = "previousPage"
})
    <span>Page @Model.Page/ @Model.PageCount</span>
    @Html.ActionLink("next page", "Users", "Admin", new
{
    page = Model.Page + Constants.DEFAULTPREVIOUSPAGEOFFSET,
    searchString = HtmlEncoder.Encode(Model.SearchString),
    isBlocked = Model.IsBlocked.ToString().ToLower(),
    isUnblocked = Model.IsUnblocked.ToString().ToLower()
}, new
{
    id = "nextPage"
})
</div>

<div class='modal fade' name='dynamiccustommodal' id='1' tabindex='-1' role='dialog' data-backdrop='static' data-keyboard='false' aria-labelledby='1Label'>
    <div class='modal-dialog' style="max-width:700px">
        <div class='modal-content'>
            <div class='modal-header'>
                <h4 class='modal-title' id="modal-title"></h4>
            </div>
            <div class='modal-body'>
                <div class='row'>
                    <div class='col-xs-12 col-md-12 col-sm-12 col-lg-12' id='modal-body'>
                    </div>
                </div>
            </div>
            <div class='modal-footer bg-default'>
                <div class='col-xs-12 col-sm-12 col-lg-12 modal-buttons' id='modal-buttons'>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script>
        var valid = true;
        var model = @Html.Raw(Json.Serialize(Model));
        var BstrapModal = function (title, body, buttons) {

            BstrapModal.Delete = function () {
                $("#modal-title").empty();
                $("#modal-body").empty();
                $("#modal-buttons").empty();
            };
            BstrapModal.Close = function () {
                $(document.getElementById(BstrapModal.Id)).modal('hide');
                BstrapModal.Delete();
            };
            this.Show = function () {
                BstrapModal.Delete();
                BstrapModal.Id = 1;
                $("#modal-title").append(title);
                $("#modal-body").append(body);
                var buttonshtml = `<button type='button' class='btn ${buttons[0].Css}' name='btn1'>${buttons[0].Value}</button>`;
                for (var i = 1; i < buttons.length; i++) {
                    buttonshtml += `<div class="filler"></div><button type='button' class='btn ${buttons[i].Css}' name='btn1'>${buttons[i].Value}</button>`;
                }
                $("#modal-buttons").append(buttonshtml);

                var btns = document.querySelectorAll(`button[name='btn${BstrapModal.Id}']`);
                for (var i = 0; i < btns.length; i++) {
                    btns[i].addEventListener("click", buttons[i].Callback || BstrapModal.Close);
                }
                $(document.getElementById(BstrapModal.Id)).modal('show');
            };
        };
        function adminEdit() {
            alert("You cant edit admin account");
        }
        function userModal(id) {
            var user = model.users.find(user => user.id === id);
            var title = `Editing ${user.firstName} ${user.lastName}`;
            var body = `<form action="UpdateOtherUser" method="post" id="userEdit">\
    <input type="hidden" value="${user.id}" name="id"/>
    <label for="userName">Username*</label>\
    <input id="userName" value="${user.userName}" type="text" name="userName" />\
    <br />\
    <label for="firstName">First name*</label>\
    <input id="firstName" value="${user.firstName}" type="text" name="firstName"/>\
    <br />\
    <label for="lastName">Last name*</label>\
    <input id="lastName" value="${user.lastName}" type="text" name="lastName"/>\
    <br />\
    <label for="userEmail">Email*</label>\
    <input id="userEmail" value="${user.email}" type="text" name="email"/>\
    <br />\
</form>`;
            var buttons = [
                {
                    Value: "Cancel",
                    Css: "btn-primary",
                    Callback: function () {
                        BstrapModal.Close();
                    }
                },
                {
                    Value: "Update",
                    Css: "btn-primary",
                    Callback: function () {
                        if (valid) {
                            $("#userEdit").submit()
                        }
                    }
                }];
            new BstrapModal(title, body, buttons).Show();
            $('#userEdit input').blur(function () {
                valid = true;
                $(this).next().remove(".warning");
                if (!$(this).val()) {
                    valid = false;
                    $('<p class="warning">Field must not be empty</p>').insertAfter(this)
                    console.log("test");
                }
            });
        }
        $(document).ready(function () {
            function reloadWithQueryStringVars(queryStringVars) {
                var existingQueryVars = location.search ? location.search.substring(1).split("&") : [],
                    currentUrl = location.search ? location.href.replace(location.search, "") : location.href,
                    newQueryVars = {},
                    newUrl = currentUrl + "?";
                if (existingQueryVars.length > 0) {
                    for (var i = 0; i < existingQueryVars.length; i++) {
                        var pair = existingQueryVars[i].split("=");
                        newQueryVars[pair[0]] = pair[1];
                    }
                }
                if (queryStringVars) {
                    for (var queryStringVar in queryStringVars) {
                        newQueryVars[queryStringVar] = queryStringVars[queryStringVar];
                    }
                }
                if (newQueryVars) {
                    for (var newQueryVar in newQueryVars) {
                        newUrl += newQueryVar + "=" + newQueryVars[newQueryVar] + "&";
                    }
                    newUrl = newUrl.substring(0, newUrl.length - 1);
                    window.location.href = newUrl;
                }
                if (!newQueryVars) {
                    window.location.href = location.href;
                }
            }

            if (@Model.Page< 2) {
                $('#previousPage').addClass('disabled')
            }


            if (@Model.Page>=@Model.PageCount) {
                $('#nextPage').addClass('disabled')
            }


            $("#IsUnblocked").change(function () {
                reloadWithQueryStringVars({
                    isUnblocked: this.checked,
                    isBlocked: '@Model.IsBlocked.ToString().ToLower()',
                    searchString: '@HtmlEncoder.Encode(Model.SearchString)',
                    page: '@Constants.DEFAULTPAGE'
                });
            });
            $("#IsBlocked").change(function () {
                reloadWithQueryStringVars({
                    isUnblocked: '@Model.IsUnblocked.ToString().ToLower()',
                    isBlocked: this.checked,
                    searchString: '@HtmlEncoder.Encode(Model.SearchString)',
                    page: '@Constants.DEFAULTPAGE'
                });
            });
            $("#searchString").change(function () {
                reloadWithQueryStringVars({
                    isUnblocked: '@Model.IsUnblocked.ToString().ToLower()',
                    isBlocked: '@Model.IsBlocked.ToString().ToLower()',
                    searchString: encodeURIComponent($("#searchString").val()),
                    page: '@Constants.DEFAULTPAGE'
                });
            });
            $(".ban-switch").change(function (event) {
                var id = $(event.target).attr('id')
                $.post("Ban", { userId: id })
            });
            $(".ban-switch-admin").change(function (event) {
                $(event.target).prop('checked', true);
                alert("You cant ban admin account");
            });
            $('#previousPage').click(function (link) {
                link.preventDefault();
                if ($(this).hasClass('disabled'))
                    return false;
                window.location.href = $(this).attr('href');
            });
            $('#nextPage').click(function (link) {
                link.preventDefault();
                if ($(this).hasClass('disabled'))
                    return false;
                window.location.href = $(this).attr('href');
            });

        });
    </script>
}