@using EducationApp.BusinessLogicLayer.Models.ViewModels
@using EducationApp.BusinessLogicLayer.Models.Users
@using EducationApp.Shared.Constants
@using System.Web
@model UsersViewModel
@{
    ViewData["Title"] = "Users list";
}
<table class="table">
    <thead>
        <tr>
            <th><a href="javascript:void(0);" class="table-head">Username</a></th>
            <th><a href="javascript:void(0);" class="table-head">Email</a></th>
            <th>
                <a href="javascript:void(0);" class="table-head sort-by descending-sort">Name</a>
                <input type="text" placeholder="Search name" id="searchString" value=@Model.SearchString />
            </th>
            <th>
                <a href="javascript:void(0);" class="table-head">Status</a>
                <div id="checkboxes">

                    @if (Model.GetBlocked)
                    {
                        <input type="checkbox" checked name="GetBlocked" id="GetBlocked" />
                    }
                    else
                    {
                        <input type="checkbox" name="GetBlocked" id="GetBlocked" />
                    }
                    <label for="GetBlocked">Blocked</label>
                    @if (Model.GetUnblocked)
                    {
                        <input type="checkbox" checked name="GetUnblocked" id="GetUnblocked" />
                    }
                    else
                    {
                        <input type="checkbox" name="GetUnblocked" id="GetUnblocked" />
                    }
                    <label for="GetUnblocked">Unblocked</label>
                </div>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (UserModel user in Model.Users)
        {
            <tr>
                <td>@user.UserName</td>
                <td>@user.Email</td>
                <td>@user.FirstName @user.LastName</td>
                <td>
                    @if (user.UserName != User.Identity.Name)
                    {
                        @if (user.IsRemoved)
                        {
                            <label class="switch">
                                <input class="ban-switch" type="checkbox" id=@user.Id>
                                <span class="slider round"></span>
                            </label>
                        }
                        else
                        {
                            <label class="switch">
                                <input class="ban-switch" type="checkbox" checked id=@user.Id>
                                <span class="slider round"></span>
                            </label>
                        }
                    }
                    else
                    {
                        <label class="switch">
                            <input class="ban-switch" type="checkbox" checked disabled id=@user.Id>
                            <span class="slider round"></span>
                        </label>
                    }
                </td>
                <td>
                    <button class="edit-user-open" onclick="test('@user.Id')"></button>
                </td>
            </tr>
        }
    </tbody>
</table>


<div class="pages">
    <div class="filler"></div>
    @Html.ActionLink("previous page", "Users", "Admin", new
{
    page = Model.CurrentPage - Constants.DEFAULTPREVIOUSPAGEOFFSET,
    searchString = HtmlEncoder.Encode(Model.SearchString),
    getBlocked = Model.GetBlocked.ToString().ToLower(),
    getUnblocked = Model.GetUnblocked.ToString().ToLower()

}, new
{
    id = "previousPage"
})
    <span>Page @Model.CurrentPage/ @Model.LastPage</span>
    @Html.ActionLink("next page", "Users", "Admin", new
{
    page = Model.CurrentPage + Constants.DEFAULTPREVIOUSPAGEOFFSET,
    searchString = HtmlEncoder.Encode(Model.SearchString),
    getBlocked = Model.GetBlocked.ToString().ToLower(),
    getUnblocked = Model.GetUnblocked.ToString().ToLower()
}, new
{
    id = "nextPage"
})
</div>

@section scripts{
    <script>
        var model = @Html.Raw(Json.Serialize(Model));
        var BstrapModal = function (title, body, buttons) {
            var title = title, body = body || "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                buttons = buttons || [{ Value: "CLOSE", Css: "btn-primary", Callback: function (event) { BstrapModal.Close(); } }, { Value: "Update", Css: "btn-primary", Callback: function (event) { $("#userEdit").submit() } } ];
            var GetModalStructure = function () {
                var that = this;
                that.Id = BstrapModal.Id = Math.random();
                var buttonshtml = "";
                for (var i = 0; i < buttons.length; i++) {
                    buttonshtml += "<button type='button' class='btn " + (buttons[i].Css || "") + "' name='btn" + that.Id + "'>" + (buttons[i].Value || "CLOSE") + "</button>";
                }
                return `<div class='modal fade' name='dynamiccustommodal' id='${that.Id}\
' tabindex='-1' role='dialog' data-backdrop='static' data-keyboard='false' aria-labelledby='${that.Id}Label'>\
    <div class='modal-dialog'>\
        <div class='modal-content'>\
            <div class='modal-header'>\
                <h4 class='modal-title'>${title}</h4>\
            </div>\
            <div class='modal-body'>\
                <div class='row'>\
                    <div class='col-xs-12 col-md-12 col-sm-12 col-lg-12'>\
                        ${body}\
                    </div>\
                </div>
            </div>
            <div class='modal-footer bg-default'>
                <div class='col-xs-12 col-sm-12 col-lg-12'>\
                    ${buttonshtml}\
                 </div>
            </div>
        </div>
    </div>
</div>`;
            }();
            BstrapModal.Delete = function () {
                var modals = document.getElementsByName("dynamiccustommodal");
                if (modals.length > 0) document.body.removeChild(modals[0]);
            };
            BstrapModal.Close = function () {
                $(document.getElementById(BstrapModal.Id)).modal('hide');
                BstrapModal.Delete();
            };
            this.Show = function () {
                BstrapModal.Delete();
                document.body.appendChild($(GetModalStructure)[0]);
                var btns = document.querySelectorAll("button[name='btn" + BstrapModal.Id + "']");
                for (var i = 0; i < btns.length; i++) {
                    btns[i].addEventListener("click", buttons[i].Callback || BstrapModal.Close);
                }
                $(document.getElementById(BstrapModal.Id)).modal('show');
            };
        };
        function test(id) {
            var user = model.users.find(user => user.id === id);
            var title = `Editing ${user.firstName} ${user.lastName}`;
            var body = `<form action="UpdateOtherUser" method="post" id="userEdit">\
    <input type="hidden" value="${user.id}" name="id"/>
    <label for="userName">Username</label>\
    <input id="userName" value="${user.userName}" type="text" name="userName" />\
    <br />\
    <label for="firstName">First name</label>\
    <input id="firstName" value="${user.firstName}" type="text" name="firstName"/>\
    <br />\
    <label for="lastName">Last name</label>\
    <input id="lastName" value="${user.lastName}" type="text" name="lastName"/>\
    <br />\
    <label for="userEmail">Email</label>\
    <input id="userEmail" value="${user.email}" type="text" name="email"/>\
    <br />\
</form>`;
            new BstrapModal(title, body).Show();
        }
        $(document).ready(function () {
            function reloadWithQueryStringVars(queryStringVars) {
                var existingQueryVars = location.search ? location.search.substring(1).split("&") : [],
                    currentUrl = location.search ? location.href.replace(location.search, "") : location.href,
                    newQueryVars = {},
                    newUrl = currentUrl + "?";
                if (existingQueryVars.length > 0) {
                    for (var i = 0; i < existingQueryVars.length; i++) {
                        var pair = existingQueryVars[i].split("=");
                        newQueryVars[pair[0]] = pair[1];
                    }
                }
                if (queryStringVars) {
                    for (var queryStringVar in queryStringVars) {
                        newQueryVars[queryStringVar] = queryStringVars[queryStringVar];
                    }
                }
                if (newQueryVars) {
                    for (var newQueryVar in newQueryVars) {
                        newUrl += newQueryVar + "=" + newQueryVars[newQueryVar] + "&";
                    }
                    newUrl = newUrl.substring(0, newUrl.length - 1);
                    window.location.href = newUrl;
                } else {
                    window.location.href = location.href;
                }
            }

            if (@Model.CurrentPage< 2) {
                $('#previousPage').addClass('disabled')
            }
            else {
                $('#previousPage').removeClass('disabled')
            }

            if (@Model.CurrentPage>=@Model.LastPage) {
                $('#nextPage').addClass('disabled')
            }
            else {
                $('#nextPage').removeClass('disabled')
            }

            $("#GetUnblocked").change(function () {
                reloadWithQueryStringVars({
                    getUnblocked: this.checked,
                    getBlocked: '@Model.GetBlocked.ToString().ToLower()',
                    searchString: '@HtmlEncoder.Encode(Model.SearchString)',
                    page: '@Constants.DEFAULTPAGE'
                });
            });
            $("#GetBlocked").change(function () {
                reloadWithQueryStringVars({
                    getUnblocked: '@Model.GetUnblocked.ToString().ToLower()',
                    getBlocked: this.checked,
                    searchString: '@HtmlEncoder.Encode(Model.SearchString)',
                    page: '@Constants.DEFAULTPAGE'
                });
            });
            $("#searchString").change(function () {
                reloadWithQueryStringVars({
                    getUnblocked: '@Model.GetUnblocked.ToString().ToLower()',
                    getBlocked: '@Model.GetBlocked.ToString().ToLower()',
                    searchString: encodeURIComponent($("#searchString").val()),
                    page: '@Constants.DEFAULTPAGE'
                });
            });
            $(".ban-switch").change(function (event) {
                console.log($(event.target).attr('id'));
                var id = $(event.target).attr('id')
                $.post("Ban", { userId: id })
            });
            $('#previousPage').click(function (link) {
                link.preventDefault();
                if ($(this).hasClass('disabled'))
                    return false;
                else
                    window.location.href = $(this).attr('href');
            });
            $('#nextPage').click(function (link) {
                link.preventDefault();
                if ($(this).hasClass('disabled'))
                    return false;
                else
                    window.location.href = $(this).attr('href');
            });

        });
    </script>
}